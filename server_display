#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>

// ✅ LED and Stepper Motor Pin Definitions
#define LED_PIN D9  

// Stepper motor control pins (A1, A2, B1, B2)
#define COIL_A1 D2
#define COIL_A2 D3
#define COIL_B1 D0
#define COIL_B2 D1

#define FILTER_SIZE 5
uint8_t proximityBuffer[FILTER_SIZE];
uint8_t bufferIndex = 0;


uint8_t getSmoothedProximity(uint8_t newValue) {
    proximityBuffer[bufferIndex] = newValue;
    bufferIndex = (bufferIndex + 1) % FILTER_SIZE;

    uint16_t sum = 0;
    for (int i = 0; i < FILTER_SIZE; i++) {
        sum += proximityBuffer[i];
    }
    return sum / FILTER_SIZE;
}


// Stepper motor step sequence (full step mode)
const int stepSequence[4][4] = {
    {1, 0, 1, 0}, // Step 1
    {0, 1, 1, 0}, // Step 2
    {0, 1, 0, 1}, // Step 3
    {1, 0, 0, 1}  // Step 4
};

#define MAX_STEPS 200  // Max steps (representing 0-255 mapped range)

// BLE Setup
static BLEUUID serviceUUID("302e6661-dd85-4087-a407-f3cd6cdb84f3");
static BLEUUID charUUID("c1e3b3c7-c7a6-4733-93fb-89091283d36c");

static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = false;
static BLERemoteCharacteristic* pRemoteCharacteristic;
static BLEAdvertisedDevice* myDevice;

uint8_t receivedProximity = 0;
int currentMotorPosition = 0;  // Track motor position

// ✅ BLE Client Callback Class
class MyClientCallback : public BLEClientCallbacks {
    void onConnect(BLEClient* pclient) {
        Serial.println("Connected to BLE Server");
    }

    void onDisconnect(BLEClient* pclient) {
        connected = false;
        Serial.println("Disconnected from server.");
    }
};

// ✅ Function to control LED based on proximity
void updateLED(uint8_t proximity) {
    if (proximity > 50) {
        digitalWrite(LED_PIN, HIGH);
    } else {
        digitalWrite(LED_PIN, LOW);
    }
}

// ✅ Stepper Motor Smooth Move to Target
void moveStepperToPosition(int targetPosition, int stepDelay) {
    if (targetPosition > currentMotorPosition) {
        int stepsToMove = targetPosition - currentMotorPosition;
        for (int i = 0; i < stepsToMove; i++) {
            for (int step = 0; step < 4; step++) {
                digitalWrite(COIL_A1, stepSequence[step][0]);
                digitalWrite(COIL_A2, stepSequence[step][1]);
                digitalWrite(COIL_B1, stepSequence[step][2]);
                digitalWrite(COIL_B2, stepSequence[step][3]);
                delay(stepDelay);
            }
        }
    } else if (targetPosition < currentMotorPosition) {
        int stepsToMove = currentMotorPosition - targetPosition;
        for (int i = 0; i < stepsToMove; i++) {
            for (int step = 3; step >= 0; step--) {
                digitalWrite(COIL_A1, stepSequence[step][0]);
                digitalWrite(COIL_A2, stepSequence[step][1]);
                digitalWrite(COIL_B1, stepSequence[step][2]);
                digitalWrite(COIL_B2, stepSequence[step][3]);
                delay(stepDelay);
            }
        }
    }
    currentMotorPosition = targetPosition; // Update current position
}

// ✅ Handle Proximity for LED & Motor
void handleProximity(uint8_t proximity) {
    updateLED(proximity); // Control LED

    int targetSteps;
    if (proximity <= 50) {
        targetSteps = 0; // Go back to zero position
    } else {
        // Map (51~255) → (0~MAX_STEPS)
        targetSteps = map(proximity, 51, 255, 0, MAX_STEPS);
    }

    Serial.print("Proximity: ");
    Serial.print(proximity);
    Serial.print(" -> Target Steps: ");
    Serial.println(targetSteps);

    moveStepperToPosition(targetSteps, 5); // Smooth move
}

// ✅ BLE Notification Callback
static void notifyCallback(
  BLERemoteCharacteristic* pBLERemoteCharacteristic,
  uint8_t* pData,
  size_t length,
  bool isNotify) {

    if (length == 1) { 
        receivedProximity = pData[0]; 
        uint8_t smoothedProximity = getSmoothedProximity(receivedProximity);  // ✅ Smooth data

        // ✅ Debug print both values
        Serial.print("Raw Proximity: ");
        Serial.print(receivedProximity);
        Serial.print(" | Smoothed Proximity: ");
        Serial.println(smoothedProximity);

        handleProximity(smoothedProximity);  // ✅ Use smoothed value
    }
}




// ✅ BLE Connection Setup
bool connectToServer() {
    Serial.print("Connecting to ");
    Serial.println(myDevice->getAddress().toString().c_str());

    BLEClient* pClient = BLEDevice::createClient();
    Serial.println(" - Created BLE client");
    pClient->setClientCallbacks(new MyClientCallback());

    if (!pClient->connect(myDevice)) return false;
    Serial.println(" - Connected to server");

    BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
    if (!pRemoteService) return false;

    pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
    if (!pRemoteCharacteristic) return false;

    if (pRemoteCharacteristic->canNotify())
        pRemoteCharacteristic->registerForNotify(notifyCallback);

    connected = true;
    return true;
}

// ✅ BLE Scan Callback
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
    void onResult(BLEAdvertisedDevice advertisedDevice) {
        if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(serviceUUID)) {
            BLEDevice::getScan()->stop();
            myDevice = new BLEAdvertisedDevice(advertisedDevice);
            doConnect = true;
            doScan = true;
        }
    }
};

// ✅ Setup Function
void setup() {
    Serial.begin(115200);
    Serial.println("Starting BLE Client...");

    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);

    pinMode(COIL_A1, OUTPUT);
    pinMode(COIL_A2, OUTPUT);
    pinMode(COIL_B1, OUTPUT);
    pinMode(COIL_B2, OUTPUT);

    BLEDevice::init("");
    BLEScan* pBLEScan = BLEDevice::getScan();
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
    pBLEScan->setInterval(1349);
    pBLEScan->setWindow(449);
    pBLEScan->setActiveScan(true);
    pBLEScan->start(5, false);
}

// ✅ Main Loop
void loop() {
    if (doConnect) {
        if (connectToServer()) {
            Serial.println("Connected to BLE Server.");
        } else {
            Serial.println("Connection failed.");
        }
        doConnect = false;
    }

    if (!connected && doScan) {
        BLEDevice::getScan()->start(0);
    }

    delay(10); // Keep loop light
}
